import argparse
import os
import sys
import pickle
import imageio
from glob import glob
from helpers import plot_field


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Reads a .pkl file from a sudoku simulation and generates a gif showing the network's progress.")
    parser.add_argument("--in_file", type=str, help=".pkl file generated by the simulator from which to plot.")
    parser.add_argument("--temp_dir", type=str, help="folder for storing the temporary images", default="temp")
    parser.add_argument("--keep", action="store_true", help="keep the temporary images after .gif creation")
    parser.add_argument("--out_file", type=str, default="sudoku_solution.gif", help="filename for the final gif.")
    
    args = parser.parse_args()
    temp_dir = args.temp_dir
    try:
        os.mkdir(temp_dir)
    except:
        print(f"temporary file folder ({temp_dir}) already exists! Aborting.")
        sys.exit()

    if os.path.exists(args.out_file):
        print(f"Target file ({args.out_file}) already exists! Aborting.")
        sys.exit()
    
    file = args.in_file

    with open(file, "rb") as f:
        simulation_data = pickle.load(f)

    solution_states = simulation_data["solution_states"]
    noise_rate = simulation_data["noise_rate"]

    image_count = 0
    for i in range(len(solution_states)):
        solution = solution_states[i]
        
        if solution.sum() == 0:
            break

        if i == 0:
            field = plot_field(solution, False)
            image_repeat = 8 # repeat the (colorless) starting configuration several times
        else:
            field = plot_field(solution, True)
            image_repeat = 1
        
        for j in range(image_repeat):
            field.save(os.path.join(temp_dir, f"{str(image_count).zfill(4)}.png"))
            image_count += 1

    # repeat the final solution a few more times to make it observable before the gif loops again
    for j in range(15):
        field.save(os.path.join(temp_dir, f"{str(image_count).zfill(4)}.png"))
        image_count += 1

    filenames = sorted(glob(os.path.join(temp_dir, "*.png")))
    
    with imageio.get_writer(args.out_file, mode='I', fps=4) as writer:
        for filename in filenames:
            image = imageio.imread(filename)
            writer.append_data(image)
    print(f"gif created under: {args.out_file}")

    if not args.keep:
        print("deleting temporary image files...")
        for file in filenames:
            os.unlink(file)
        os.rmdir(temp_dir)

